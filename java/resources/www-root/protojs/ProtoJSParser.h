/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : ProtoJS.g
 *     -                            On : 2012-11-06 01:39:24
 *     -                for the parser : ProtoJSParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser ProtoJSParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pProtoJSParser, which is returned from a call to ProtoJSParserNew().
 *
 * The methods in pProtoJSParser are  as follows:
 *
 *  - ProtoJSParser_protocol_return      pProtoJSParser->protocol(pProtoJSParser)
 *  - ProtoJSParser_protoroot_return      pProtoJSParser->protoroot(pProtoJSParser)
 *  - ProtoJSParser_pbj_header_return      pProtoJSParser->pbj_header(pProtoJSParser)
 *  - ProtoJSParser_package_return      pProtoJSParser->package(pProtoJSParser)
 *  - ProtoJSParser_packagename_return      pProtoJSParser->packagename(pProtoJSParser)
 *  - ProtoJSParser_importrule_return      pProtoJSParser->importrule(pProtoJSParser)
 *  - ProtoJSParser_service_return      pProtoJSParser->service(pProtoJSParser)
 *  - ProtoJSParser_service_block_return      pProtoJSParser->service_block(pProtoJSParser)
 *  - ProtoJSParser_service_args_return      pProtoJSParser->service_args(pProtoJSParser)
 *  - ProtoJSParser_message_return      pProtoJSParser->message(pProtoJSParser)
 *  - ProtoJSParser_message_not_extend_return      pProtoJSParser->message_not_extend(pProtoJSParser)
 *  - ProtoJSParser_extend_not_message_return      pProtoJSParser->extend_not_message(pProtoJSParser)
 *  - ProtoJSParser_message_identifier_return      pProtoJSParser->message_identifier(pProtoJSParser)
 *  - ProtoJSParser_at_least_one_message_element_return      pProtoJSParser->at_least_one_message_element(pProtoJSParser)
 *  - ProtoJSParser_zero_or_more_message_elements_return      pProtoJSParser->zero_or_more_message_elements(pProtoJSParser)
 *  - ProtoJSParser_newline_message_element_return      pProtoJSParser->newline_message_element(pProtoJSParser)
 *  - ProtoJSParser_message_element_return      pProtoJSParser->message_element(pProtoJSParser)
 *  - ProtoJSParser_extensions_return      pProtoJSParser->extensions(pProtoJSParser)
 *  - ProtoJSParser_reservations_return      pProtoJSParser->reservations(pProtoJSParser)
 *  - ProtoJSParser_integer_inclusive_return      pProtoJSParser->integer_inclusive(pProtoJSParser)
 *  - ProtoJSParser_enum_def_return      pProtoJSParser->enum_def(pProtoJSParser)
 *  - ProtoJSParser_at_least_one_enum_element_return      pProtoJSParser->at_least_one_enum_element(pProtoJSParser)
 *  - ProtoJSParser_zero_or_more_enum_elements_return      pProtoJSParser->zero_or_more_enum_elements(pProtoJSParser)
 *  - ProtoJSParser_enum_element_return      pProtoJSParser->enum_element(pProtoJSParser)
 *  - ProtoJSParser_enum_identifier_return      pProtoJSParser->enum_identifier(pProtoJSParser)
 *  - ProtoJSParser_flags_def_return      pProtoJSParser->flags_def(pProtoJSParser)
 *  - ProtoJSParser_flag_identifier_return      pProtoJSParser->flag_identifier(pProtoJSParser)
 *  - ProtoJSParser_at_least_one_flag_element_return      pProtoJSParser->at_least_one_flag_element(pProtoJSParser)
 *  - ProtoJSParser_zero_or_more_flag_elements_return      pProtoJSParser->zero_or_more_flag_elements(pProtoJSParser)
 *  - ProtoJSParser_flag_element_return      pProtoJSParser->flag_element(pProtoJSParser)
 *  - ProtoJSParser_field_return      pProtoJSParser->field(pProtoJSParser)
 *  - ProtoJSParser_multiplicity_return      pProtoJSParser->multiplicity(pProtoJSParser)
 *  - ProtoJSParser_none_return      pProtoJSParser->none(pProtoJSParser)
 *  - ProtoJSParser_field_offset_return      pProtoJSParser->field_offset(pProtoJSParser)
 *  - ProtoJSParser_field_name_return      pProtoJSParser->field_name(pProtoJSParser)
 *  - ProtoJSParser_field_type_return      pProtoJSParser->field_type(pProtoJSParser)
 *  - ProtoJSParser_type_identifier_return      pProtoJSParser->type_identifier(pProtoJSParser)
 *  - ProtoJSParser_multiplicitive_type_return      pProtoJSParser->multiplicitive_type(pProtoJSParser)
 *  - ProtoJSParser_array_spec_return      pProtoJSParser->array_spec(pProtoJSParser)
 *  - ProtoJSParser_option_assignment_return      pProtoJSParser->option_assignment(pProtoJSParser)
 *  - ProtoJSParser_option_assignment_value_return      pProtoJSParser->option_assignment_value(pProtoJSParser)
 *  - ProtoJSParser_default_value_return      pProtoJSParser->default_value(pProtoJSParser)
 *  - ProtoJSParser_option_pairs_return      pProtoJSParser->option_pairs(pProtoJSParser)
 *  - ProtoJSParser_option_pair_return      pProtoJSParser->option_pair(pProtoJSParser)
 *  - ProtoJSParser_option_literal_value_return      pProtoJSParser->option_literal_value(pProtoJSParser)
 *  - ProtoJSParser_default_literal_value_return      pProtoJSParser->default_literal_value(pProtoJSParser)
 *  - ProtoJSParser_floating_point_type_return      pProtoJSParser->floating_point_type(pProtoJSParser)
 *  - ProtoJSParser_double_floating_point_type_return      pProtoJSParser->double_floating_point_type(pProtoJSParser)
 *  - ProtoJSParser_numeric_type_return      pProtoJSParser->numeric_type(pProtoJSParser)
 *  - ProtoJSParser_array_type_return      pProtoJSParser->array_type(pProtoJSParser)
 *  - ProtoJSParser_multiplicitive_advanced_type_return      pProtoJSParser->multiplicitive_advanced_type(pProtoJSParser)
 *  - ProtoJSParser_advanced_numeric_type_return      pProtoJSParser->advanced_numeric_type(pProtoJSParser)
 *  - ProtoJSParser_advanced_array_type_return      pProtoJSParser->advanced_array_type(pProtoJSParser)
 *  - ProtoJSParser_literal_value_return      pProtoJSParser->literal_value(pProtoJSParser)
 *  - ProtoJSParser_flags_return      pProtoJSParser->flags(pProtoJSParser)
 *  - ProtoJSParser_integer_return      pProtoJSParser->integer(pProtoJSParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ProtoJSParser_H
#define _ProtoJSParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ProtoJSParser_Ctx_struct ProtoJSParser, * pProtoJSParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct ProtoJSParser_protocol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_protocol_return;

typedef struct ProtoJSParser_protoroot_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_protoroot_return;

typedef struct ProtoJSParser_pbj_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_pbj_header_return;

typedef struct ProtoJSParser_package_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_package_return;

typedef struct ProtoJSParser_packagename_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_packagename_return;

typedef struct ProtoJSParser_importrule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_importrule_return;

typedef struct ProtoJSParser_service_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_service_return;

typedef struct ProtoJSParser_service_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_service_block_return;

typedef struct ProtoJSParser_service_args_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_service_args_return;

typedef struct ProtoJSParser_message_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_message_return;

typedef struct ProtoJSParser_message_not_extend_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_message_not_extend_return;

typedef struct ProtoJSParser_extend_not_message_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_extend_not_message_return;

typedef struct ProtoJSParser_message_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_message_identifier_return;

typedef struct ProtoJSParser_at_least_one_message_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_at_least_one_message_element_return;

typedef struct ProtoJSParser_zero_or_more_message_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_zero_or_more_message_elements_return;

typedef struct ProtoJSParser_newline_message_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_newline_message_element_return;

typedef struct ProtoJSParser_message_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_message_element_return;

typedef struct ProtoJSParser_extensions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_extensions_return;

typedef struct ProtoJSParser_reservations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_reservations_return;

typedef struct ProtoJSParser_integer_inclusive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_integer_inclusive_return;

typedef struct ProtoJSParser_enum_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_enum_def_return;

typedef struct ProtoJSParser_at_least_one_enum_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_at_least_one_enum_element_return;

typedef struct ProtoJSParser_zero_or_more_enum_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_zero_or_more_enum_elements_return;

typedef struct ProtoJSParser_enum_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_enum_element_return;

typedef struct ProtoJSParser_enum_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_enum_identifier_return;

typedef struct ProtoJSParser_flags_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_flags_def_return;

typedef struct ProtoJSParser_flag_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_flag_identifier_return;

typedef struct ProtoJSParser_at_least_one_flag_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_at_least_one_flag_element_return;

typedef struct ProtoJSParser_zero_or_more_flag_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_zero_or_more_flag_elements_return;

typedef struct ProtoJSParser_flag_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_flag_element_return;

typedef struct ProtoJSParser_field_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_field_return;

typedef struct ProtoJSParser_multiplicity_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_multiplicity_return;

typedef struct ProtoJSParser_none_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_none_return;

typedef struct ProtoJSParser_field_offset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_field_offset_return;

typedef struct ProtoJSParser_field_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_field_name_return;

typedef struct ProtoJSParser_field_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_field_type_return;

typedef struct ProtoJSParser_type_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_type_identifier_return;

typedef struct ProtoJSParser_multiplicitive_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_multiplicitive_type_return;

typedef struct ProtoJSParser_array_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_array_spec_return;

typedef struct ProtoJSParser_option_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_option_assignment_return;

typedef struct ProtoJSParser_option_assignment_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_option_assignment_value_return;

typedef struct ProtoJSParser_default_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_default_value_return;

typedef struct ProtoJSParser_option_pairs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_option_pairs_return;

typedef struct ProtoJSParser_option_pair_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_option_pair_return;

typedef struct ProtoJSParser_option_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_option_literal_value_return;

typedef struct ProtoJSParser_default_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_default_literal_value_return;

typedef struct ProtoJSParser_floating_point_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_floating_point_type_return;

typedef struct ProtoJSParser_double_floating_point_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_double_floating_point_type_return;

typedef struct ProtoJSParser_numeric_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_numeric_type_return;

typedef struct ProtoJSParser_array_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_array_type_return;

typedef struct ProtoJSParser_multiplicitive_advanced_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_multiplicitive_advanced_type_return;

typedef struct ProtoJSParser_advanced_numeric_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_advanced_numeric_type_return;

typedef struct ProtoJSParser_advanced_array_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_advanced_array_type_return;

typedef struct ProtoJSParser_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_literal_value_return;

typedef struct ProtoJSParser_flags_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_flags_return;

typedef struct ProtoJSParser_integer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ProtoJSParser_integer_return;



/* globalAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the Symbols scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_SymbolsPush().
 */
typedef struct  ProtoJSParser_Symbols_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_Symbols_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    pANTLR3_STRING message;
    pANTLR3_LIST required_advanced_fields;
    pANTLR3_HASH_TABLE types;
    pANTLR3_HASH_TABLE flag_sizes;
    pANTLR3_HASH_TABLE enum_sizes;
    pANTLR3_HASH_TABLE flag_values;
    pANTLR3_HASH_TABLE flag_all_on;
    pANTLR3_HASH_TABLE enum_values;
    int *reserved_range_start;
    int *reserved_range_end;
    int num_reserved_ranges;
    int *extension_range_start;
    int *extension_range_end;
    int num_extension_ranges;
    struct CsStreams *cs_streams;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_Symbols_SCOPE, * pProtoJSParser_Symbols_SCOPE;
/* globalAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the NameSpace scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_NameSpacePush().
 */
typedef struct  ProtoJSParser_NameSpace_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_NameSpace_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    struct LanguageOutputStruct* output;
    pANTLR3_STRING filename;
    pANTLR3_STRING externalNamespace;
    pANTLR3_STRING internalNamespace;
    pANTLR3_STRING package;
    pANTLR3_STRING packageDot;
    pANTLR3_STRING jsPackageDefinition;
    pANTLR3_LIST imports;
    pANTLR3_HASH_TABLE qualifiedTypes;
    int isPBJ;
    void*parent;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_NameSpace_SCOPE, * pProtoJSParser_NameSpace_SCOPE;

/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the message scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_messagePush().
 */
typedef struct  ProtoJSParser_message_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_message_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    int isExtension;
    pANTLR3_STRING messageName;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_message_SCOPE, * pProtoJSParser_message_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the enum_def scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_enum_defPush().
 */
typedef struct  ProtoJSParser_enum_def_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_enum_def_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    pANTLR3_STRING enumName;
    pANTLR3_LIST enumList;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_enum_def_SCOPE, * pProtoJSParser_enum_def_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the flags_def scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_flags_defPush().
 */
typedef struct  ProtoJSParser_flags_def_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_flags_def_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    pANTLR3_STRING flagName;
    pANTLR3_LIST flagList;
    int flagBits;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_flags_def_SCOPE, * pProtoJSParser_flags_def_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the field scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_fieldPush().
 */
typedef struct  ProtoJSParser_field_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_field_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    pANTLR3_STRING fieldType;
    pANTLR3_STRING fieldName;
    pANTLR3_STRING defaultValue;
    int fieldOffset;
    int isNumericType;
    int isRepeated;
    int isRequired;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_field_SCOPE, * pProtoJSParser_field_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the option_pair scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  ProtoJSParser_option_pairPush().
 */
typedef struct  ProtoJSParser_option_pair_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct ProtoJSParser_option_pair_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    pANTLR3_STRING literalValue;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    ProtoJSParser_option_pair_SCOPE, * pProtoJSParser_option_pair_SCOPE;

/** Context tracking structure for ProtoJSParser
 */
struct ProtoJSParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
    /* globalAttributeScopeDef(scope)
     */
    /** Pointer to the  Symbols stack for use by pProtoJSParser_SymbolsPush()
     *  and pProtoJSParser_SymbolsPop()
     */
    pANTLR3_STACK pProtoJSParser_SymbolsStack;
    ANTLR3_UINT32 pProtoJSParser_SymbolsStack_limit;
    /** Pointer to the top of the stack for the global scope pProtoJSParser_SymbolsStack
     */
    pProtoJSParser_Symbols_SCOPE    (*pProtoJSParser_SymbolsPush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_Symbols_SCOPE    pProtoJSParser_SymbolsTop;


    /* globalAttributeScopeDef(scope)
     */
    /** Pointer to the  NameSpace stack for use by pProtoJSParser_NameSpacePush()
     *  and pProtoJSParser_NameSpacePop()
     */
    pANTLR3_STACK pProtoJSParser_NameSpaceStack;
    ANTLR3_UINT32 pProtoJSParser_NameSpaceStack_limit;
    /** Pointer to the top of the stack for the global scope pProtoJSParser_NameSpaceStack
     */
    pProtoJSParser_NameSpace_SCOPE    (*pProtoJSParser_NameSpacePush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_NameSpace_SCOPE    pProtoJSParser_NameSpaceTop;

    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  message stack for use by pProtoJSParser_messagePush()
     *  and pProtoJSParser_messagePop()
     */
    pANTLR3_STACK pProtoJSParser_messageStack;
    ANTLR3_UINT32 pProtoJSParser_messageStack_limit;
    pProtoJSParser_message_SCOPE   (*pProtoJSParser_messagePush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_message_SCOPE   pProtoJSParser_messageTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  enum_def stack for use by pProtoJSParser_enum_defPush()
     *  and pProtoJSParser_enum_defPop()
     */
    pANTLR3_STACK pProtoJSParser_enum_defStack;
    ANTLR3_UINT32 pProtoJSParser_enum_defStack_limit;
    pProtoJSParser_enum_def_SCOPE   (*pProtoJSParser_enum_defPush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_enum_def_SCOPE   pProtoJSParser_enum_defTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  flags_def stack for use by pProtoJSParser_flags_defPush()
     *  and pProtoJSParser_flags_defPop()
     */
    pANTLR3_STACK pProtoJSParser_flags_defStack;
    ANTLR3_UINT32 pProtoJSParser_flags_defStack_limit;
    pProtoJSParser_flags_def_SCOPE   (*pProtoJSParser_flags_defPush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_flags_def_SCOPE   pProtoJSParser_flags_defTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  field stack for use by pProtoJSParser_fieldPush()
     *  and pProtoJSParser_fieldPop()
     */
    pANTLR3_STACK pProtoJSParser_fieldStack;
    ANTLR3_UINT32 pProtoJSParser_fieldStack_limit;
    pProtoJSParser_field_SCOPE   (*pProtoJSParser_fieldPush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_field_SCOPE   pProtoJSParser_fieldTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  option_pair stack for use by pProtoJSParser_option_pairPush()
     *  and pProtoJSParser_option_pairPop()
     */
    pANTLR3_STACK pProtoJSParser_option_pairStack;
    ANTLR3_UINT32 pProtoJSParser_option_pairStack_limit;
    pProtoJSParser_option_pair_SCOPE   (*pProtoJSParser_option_pairPush)(struct ProtoJSParser_Ctx_struct * ctx);
    pProtoJSParser_option_pair_SCOPE   pProtoJSParser_option_pairTop;


     ProtoJSParser_protocol_return (*protocol)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_protoroot_return (*protoroot)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_pbj_header_return (*pbj_header)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_package_return (*package)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_packagename_return (*packagename)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_importrule_return (*importrule)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_service_return (*service)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_service_block_return (*service_block)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_service_args_return (*service_args)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_message_return (*message)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_message_not_extend_return (*message_not_extend)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_extend_not_message_return (*extend_not_message)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_message_identifier_return (*message_identifier)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_at_least_one_message_element_return (*at_least_one_message_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_zero_or_more_message_elements_return (*zero_or_more_message_elements)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_newline_message_element_return (*newline_message_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_message_element_return (*message_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_extensions_return (*extensions)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_reservations_return (*reservations)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_integer_inclusive_return (*integer_inclusive)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_enum_def_return (*enum_def)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_at_least_one_enum_element_return (*at_least_one_enum_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_zero_or_more_enum_elements_return (*zero_or_more_enum_elements)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_enum_element_return (*enum_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_enum_identifier_return (*enum_identifier)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_flags_def_return (*flags_def)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_flag_identifier_return (*flag_identifier)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_at_least_one_flag_element_return (*at_least_one_flag_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_zero_or_more_flag_elements_return (*zero_or_more_flag_elements)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_flag_element_return (*flag_element)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_field_return (*field)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_multiplicity_return (*multiplicity)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_none_return (*none)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_field_offset_return (*field_offset)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_field_name_return (*field_name)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_field_type_return (*field_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_type_identifier_return (*type_identifier)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_multiplicitive_type_return (*multiplicitive_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_array_spec_return (*array_spec)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_option_assignment_return (*option_assignment)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_option_assignment_value_return (*option_assignment_value)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_default_value_return (*default_value)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_option_pairs_return (*option_pairs)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_option_pair_return (*option_pair)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_option_literal_value_return (*option_literal_value)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_default_literal_value_return (*default_literal_value)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_floating_point_type_return (*floating_point_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_double_floating_point_type_return (*double_floating_point_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_numeric_type_return (*numeric_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_array_type_return (*array_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_multiplicitive_advanced_type_return (*multiplicitive_advanced_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_advanced_numeric_type_return (*advanced_numeric_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_advanced_array_type_return (*advanced_array_type)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_literal_value_return (*literal_value)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_flags_return (*flags)	(struct ProtoJSParser_Ctx_struct * ctx);
     ProtoJSParser_integer_return (*integer)	(struct ProtoJSParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct ProtoJSParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pProtoJSParser ProtoJSParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pProtoJSParser ProtoJSParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define SINT16      68
#define SHA256      76
#define FLAGS64      85
#define VECTOR3F      52
#define FLAGS8      82
#define VECTOR3D      53
#define INT8      63
#define EQUALS      25
#define FIXED64      44
#define EOF      -1
#define QUOTE      95
#define STRING_LITERAL      5
#define FLOATING_POINT_LITERAL      80
#define VECTOR2D      51
#define VECTOR2F      50
#define UINT16      71
#define DOUBLE      35
#define FIXED8      65
#define COMMENT      93
#define SINT32      38
#define IDENTIFIERCOLON      92
#define INT16      67
#define BLOCK_OPEN      12
#define QUATERNION      57
#define QUALIFIEDIDENTIFIER      8
#define PAREN_CLOSE      16
#define ITEM_TERMINATOR      7
#define BOOL      46
#define REPEATED      28
#define BOOL_LITERAL      81
#define UINT64      41
#define DURATION      74
#define INT32      37
#define SINT8      64
#define FLAGS32      84
#define WS      94
#define BLOCK_CLOSE      13
#define SERVICE      11
#define FIXED16      69
#define PACKAGELITERAL      6
#define SFIXED16      70
#define ProtoJSOPTIONAL      26
#define BYTES      48
#define RPC      14
#define IMPORTLITERAL      10
#define DECIMAL_LITERAL      78
#define EscapeSequence      87
#define SQBRACKET_CLOSE      31
#define BOUNDINGBOX3F3F      60
#define UINT8      62
#define UUID      75
#define STRING_GUTS      86
#define Exponent      89
#define FLOAT      34
#define HexDigit      88
#define BOUNDINGBOX3D3F      61
#define TIME      73
#define EXTEND      20
#define SINT64      43
#define EXTENSIONS      21
#define COMMA      18
#define IDENTIFIER      9
#define FIXED32      39
#define SQBRACKET_OPEN      30
#define SFIXED32      40
#define MESSAGE      19
#define HEX_LITERAL      77
#define FLAGS16      83
#define DOT      29
#define NORMAL      49
#define RETURNS      17
#define ANGLE      72
#define INT64      42
#define TO      22
#define DEFAULT      33
#define BOUNDINGSPHERE3D      59
#define OPTION_LITERAL      32
#define OCTAL_LITERAL      79
#define RESERVE      23
#define BOUNDINGSPHERE3F      58
#define REQUIRED      27
#define COLON      96
#define UNITQUATERNION      56
#define ENUM      24
#define SFIXED64      45
#define UnicodeEscape      91
#define VECTOR4D      55
#define UINT32      36
#define PAREN_OPEN      15
#define VECTOR4F      54
#define PROTO      4
#define OctalEscape      90
#define SFIXED8      66
#define STRING      47
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ProtoJSParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
